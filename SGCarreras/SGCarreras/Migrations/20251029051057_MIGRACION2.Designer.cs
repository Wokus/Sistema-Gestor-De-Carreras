// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SGCarreras.Data;

#nullable disable

namespace SGCarreras.Migrations
{
    [DbContext(typeof(SGCarrerasContext))]
    [Migration("20251029051057_MIGRACION2")]
    partial class MIGRACION2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.11");

            modelBuilder.Entity("SGCarreras.Models.Carrera", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Estado")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("TEXT");

                    b.Property<double>("KmTotales")
                        .HasColumnType("REAL");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Ubicacion")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Carrera");
                });

            modelBuilder.Entity("SGCarreras.Models.Corredor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Cedula")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Contra")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Mail")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Nacionalidad")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("NombreCompleto")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Sexo")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Mail")
                        .IsUnique();

                    b.ToTable("Corredor");
                });

            modelBuilder.Entity("SGCarreras.Models.PuntoDeControl", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CarreraId")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Distancia")
                        .HasColumnType("REAL");

                    b.HasKey("id");

                    b.HasIndex("CarreraId");

                    b.ToTable("PuntoDeControl");
                });

            modelBuilder.Entity("SGCarreras.Models.Registro", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CarreraId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CorredorId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("HoraDeFinalizacion")
                        .HasColumnType("TEXT");

                    b.Property<int>("NumeroEnCarrera")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PosicionEnCarrera")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CarreraId");

                    b.HasIndex("CorredorId");

                    b.ToTable("Registro");
                });

            modelBuilder.Entity("SGCarreras.Models.TiempoParcial", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("PuntoControlId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RegistroId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Tiempo")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("PuntoControlId");

                    b.HasIndex("RegistroId");

                    b.ToTable("TiempoParcial");
                });

            modelBuilder.Entity("SGCarreras.Models.PuntoDeControl", b =>
                {
                    b.HasOne("SGCarreras.Models.Carrera", "Carrera")
                        .WithMany("PuntosDeControl")
                        .HasForeignKey("CarreraId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Carrera");
                });

            modelBuilder.Entity("SGCarreras.Models.Registro", b =>
                {
                    b.HasOne("SGCarreras.Models.Carrera", "Carrera")
                        .WithMany("Registros")
                        .HasForeignKey("CarreraId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SGCarreras.Models.Corredor", "Corredor")
                        .WithMany("registros")
                        .HasForeignKey("CorredorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Carrera");

                    b.Navigation("Corredor");
                });

            modelBuilder.Entity("SGCarreras.Models.TiempoParcial", b =>
                {
                    b.HasOne("SGCarreras.Models.PuntoDeControl", "PuntoControl")
                        .WithMany()
                        .HasForeignKey("PuntoControlId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SGCarreras.Models.Registro", "Registro")
                        .WithMany("TiemposParciales")
                        .HasForeignKey("RegistroId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PuntoControl");

                    b.Navigation("Registro");
                });

            modelBuilder.Entity("SGCarreras.Models.Carrera", b =>
                {
                    b.Navigation("PuntosDeControl");

                    b.Navigation("Registros");
                });

            modelBuilder.Entity("SGCarreras.Models.Corredor", b =>
                {
                    b.Navigation("registros");
                });

            modelBuilder.Entity("SGCarreras.Models.Registro", b =>
                {
                    b.Navigation("TiemposParciales");
                });
#pragma warning restore 612, 618
        }
    }
}
